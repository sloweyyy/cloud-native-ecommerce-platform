version: '3.4'

services:
  catalogdb:
    container_name: catalogdb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  basketdb:
    container_name: basketdb
    restart: always
    ports:
      - "6379:6379"

  discountdb:
    container_name: discountdb
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  orderdb:
    container_name: orderdb
    environment:
      SA_PASSWORD: ${SQL_SA_PASSWORD}
      ACCEPT_EULA: ${ACCEPT_EULA}
    restart: always
    ports:
      - "1433:1433"
    volumes:
      - orderdb-data:/var/opt/mssql
    healthcheck:
      test: [ "CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P '${SQL_SA_PASSWORD}' -Q 'select 1' -C" ]
      interval: 10s
      timeout: 10s
      retries: 3

  rabbitmq:
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}

  pgadmin:
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    restart: always
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/root/.pgadmin

  portainer:
    container_name: portainer
    restart: always
    ports:
      - "8080:8000"
      - "9090:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

  catalog.api:
    container_name: catalog.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DatabaseSettings__ConnectionString=${MONGODB_URL}
      - DatabaseSettings__DatabaseName=${MONGO_DB}
      - DatabaseSettings__CollectionName=Products
      - DatabaseSettings__BrandsCollection=Brands
      - DatabaseSettings__TypesCollection=Types
      - ElasticConfiguration__Uri=${ELASTICSEARCH_URL}
    depends_on:
      - catalogdb
    ports:
      - "8000:8080"

  basket.api:
    container_name: basket.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - CacheSettings__ConnectionString=${REDIS_URL}
      - GrpcSettings__DiscountUrl=http://discount.api:8080
      - EventBusSettings__HostAddress=${RABBITMQ_URL}
      - ElasticConfiguration__Uri=${ELASTICSEARCH_URL}
    depends_on:
      - basketdb
      - rabbitmq
    ports:
      - "8001:8080"

  discount.api:
    container_name: discount.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - DatabaseSettings__ConnectionString=${POSTGRES_URL}
      - ElasticConfiguration__Uri=${ELASTICSEARCH_URL}
    depends_on:
      discountdb:
        condition: service_healthy
    ports:
      - "8002:8080"

  ordering.api:
    container_name: ordering.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__OrderingConnectionString=${SQLSERVER_URL}
      - EventBusSettings__HostAddress=${RABBITMQ_URL}
      - ElasticConfiguration__Uri=${ELASTICSEARCH_URL}
    depends_on:
      - orderdb
      - rabbitmq
    ports:
      - "8003:8080"

  ocelot.apigateway:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    depends_on:
      - catalog.api
      - basket.api
      - discount.api
      - ordering.api
    ports:
      - "8010:8080"

  elasticsearch:
    container_name: elasticsearch
    environment:
      - ES_JAVA_OPTS=${ES_JAVA_OPTS}
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  kibana:
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
